Data Movement Instructions: - ✅
MOV: Move data between registers or between memory and registers.  - ✅
LEA: Load effective address. - ✅
Arithmetic and Logic Instructions:
ADD, SUB, MUL, DIV: Basic arithmetic operations. - ✅
AND, OR, XOR, NOT: Logical operations. - ✅
INC, DEC: Increment and decrement. - ✅
Control Flow Instructions:
JMP: Unconditional jump.
JE, JNE, JZ, JNZ: Conditional jumps.
CALL, RET: Subroutine call and return.
CMP: Compare values (used with conditional jumps).
Stack Instructions:
PUSH, POP: Push onto and pop from the stack.
Input/Output Instructions:
IN, OUT: Input/output operations.
Flag Control Instructions:
CLC, STC, CLI, STI: Control flags.
Miscellaneous Instructions:
NOP: No operation.
HLT: Halt the processor.
INT: Software interrupt.


Extra:
SYSCALL: for long mode interrupts. - ✅
PUSHA: Pushing all general purpose registers onto the stack
POPA: Pop counterpart of PUSHA, popping all general purpose registers
MOVZX: Move with zero-extension (padding).

https://docs.google.com/document/d/1bm9lxVyAk2qogOF9ujERyRcSwXkpKxLW8IWVU8FuMyE/edit?usp=sharing

Current plan:
As of 14/9, the current plan is to make the assembler work only with stack
variables and not rip addressing or segment addressing etc, we'll currently 
just be able to write a c compiler in this before we continue and add other 
functionality like relocation and everything else in between :):)
